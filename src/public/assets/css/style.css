@import url("https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap");

div.container {
  background-color: #36393f
}

* {
  color: #fff;
  font-family: Fredoka One, sans-serif
}

h1.header,
h3.subtitle {
  color: #fff;
  font-family: burbank;
  text-align: center;
  word-spacing: 5px
}

h3.subtitle {
  color: #8e8e8e
}

.dropdown-item,
.nav-link {
  font-family: bangers
}

.navbar-brand {
  font-family: discord;
  font-weight: 15px
}

.sticky {
  position: fixed;
  top: 0;
  width: 100%
}

.sticky+d.container {
  padding-top: 60px
}

.swal-modal {
  background-color: #36393f
}

.swal-overlay {
  background-color: #36393F
}

.swal-button {
  background-color: #57F287;
  border-radius: 2px;
  font-family: discord;
  font-size: 20px;
  padding: 7px 19px
}

.swal-text {
  color: #fff;
  font-family: discord
}

.swal-title {
  color: #fff;
  font-family: burbank
}

@font-face {
  font-family: discord;
  src: url(/assets/font/sans.otf)
}

@font-face {
  font-family: burbank;
  src: url(/assets/font/Burbank.otf)
}

@font-face {
  font-family: angrybirds;
  src: url(/assets/angrybirds.ttf)
}

@font-face {
  font-family: bangers;
  src: url(/assets/Bangers.ttf)
}

img.vert-move {
  animation: mover 1s infinite alternate
}

@keyframes mover {
  0% {
    transform: translateY(0)
  }

  to {
    transform: translateY(-10px)
  }
}

#loading {
  background-color: #36393f;
  height: 100%;
  margin: 0;
  padding: 0;
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 9999
}

#loading-center {
  height: 100%;
  position: relative;
  width: 100%
}

#loading-center-absolute {
  height: 200px;
  left: 50%;
  margin-left: -100px;
  margin-top: -100px;
  position: absolute;
  top: 50%;
  width: 200px
}

#object {
  animation: animate 1s ease-in-out infinite;
  background-color: #fff;
  border-radius: 5px;
  height: 60px;
  margin-left: auto;
  margin-right: auto;
  margin-top: 60px;
  width: 60px
}

@keyframes animate {
  0% {
    transform: perspective(160px) rotateX(0deg) rotateY(0deg);
    -webkit-transform: perspective(160px) rotateX(0deg) rotateY(0deg)
  }

  50% {
    transform: perspective(160px) rotateX(-180deg) rotateY(0deg);
    -webkit-transform: perspective(160px) rotateX(-180deg) rotateY(0deg)
  }

  to {
    transform: perspective(160px) rotateX(-180deg) rotateY(-180deg);
    -webkit-transform: perspective(160px) rotateX(-180deg) rotateY(-180deg)
  }
}

#scroll {
  background-color: #5865F2;
  border-radius: 60px;
  bottom: 10px;
  cursor: pointer;
  display: none;
  height: 50px;
  position: fixed;
  right: 10px;
  text-indent: -9999px;
  width: 50px
}

#scroll span {
  border: 8px solid transparent;
  border-bottom-color: #fff;
  height: 0;
  left: 50%;
  margin-left: -8px;
  margin-top: -12px;
  position: absolute;
  top: 50%;
  width: 0
}

#scroll:hover {
  background-color: red;
  filter: "alpha(opacity=100)";
  -ms-filter: "alpha(opacity=100)";
  opacity: 1
}
/*# sourceMappingURL=data:application/json;base64, */